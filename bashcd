#!/bin/sh

# Copyright (c) 2013, Matthew Flower
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#    Neither the name of the Matthew Flower nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

special_cd_menu() {
	declare -a matches=("${!1}")

	if [ ${#matches[*]} -eq 0 ] ; then
		echo "No matching directories were found"
	elif [ ${#matches[*]} -eq 1 ] ; then
		cd $matches
	else
		echo
		echo "Please choose a directory to change to"
		echo "--------------------------------------"
		i=1
		for dir in ${matches[@]} ; do
			printf '%3d. %s \n' $i $dir
			let i=$i+1
		done

		echo
		printf "Your choice: "
		read which_match
		let which_match=$which_match-1

		#Print one more line -- it looks odd otherwise
		echo

		cd ${matches[which_match]}
	fi
}

#----------------------------------------------------------------------------------------------------------------
# ucd
#----------------------------------------------------------------------------------------------------------------

ucd_usage() {
    cat << EOF

Usage
-----

  ucd <directory name>

ucd changes to any parent directory of your current directory.  It also supports
autocompletion so you can complete the name easily without having to type it out.

This should prevent the mental math necessary to figure out how many dots you will
need to type when doing something like cd ../../../..

Example
-------
/home/mflower/a/b/c/d/e/f/g$ ucd c
/home/mflower/a/b/c$

EOF

}

ucd() {
    if [ $# -eq 0 ] ; then
    	ucd_usage
    	return
    fi

    CURRENT_DIR=`pwd`
	MATCHES_TEXT=`dirname $CURRENT_DIR | sed 's#/# #g' | sort | uniq`
	MATCHES=()
	curr=0
	for match in $MATCHES_TEXT; do
		if [[ "$match" == "$1" ]]; then
			MATCHES[$curr]=$match
			let curr=$curr+1
		fi
	done

	if [ ${#MATCHES[*]} -eq 0 ] ; then
		echo "No matching directories were found"
	elif [ ${#MATCHES[*]} -eq 1 ] ; then
		cd `dirname $CURRENT_DIR | grep -Eo "^.*$MATCHES"`
	else
		echo
		echo "Please choose a directory to change to"
		echo "--------------------------------------"
		i=1
		maxcount=`echo "$CURRENT_DIR" | grep -Eo "/" | wc -l`
		menuindex=1;

		PARENT_DIR=`dirname $CURRENT_DIR`
		DIR_MATCHES=()

		while [ $i -le $maxcount ]; do
			dir=`echo $PARENT_DIR | grep -Eo "^([^/]*/){$i}$1"`
			if [ $? -eq 0 ]; then
				DIR_MATCHES[`expr $menuindex - 1`]=$dir
				printf '%3d. %s \n' $menuindex $dir
				let menuindex=$menuindex+1
			fi
			let i=$i+1
		done

		echo
		printf "Your choice: "
		read which_match
		let which_match=$which_match-1

		#Print one more line -- it looks odd otherwise
		echo

		cd ${DIR_MATCHES[which_match]}
	fi
}

ucd_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

	CURRENT_DIR=`pwd`
	MATCHES_TEXT=`dirname $CURRENT_DIR | sed 's#/# #g' | sort | uniq`

	COMPREPLY=( $(compgen -W "${MATCHES_TEXT}" -- ${cur}) )
	return 0

}

complete -F ucd_completion ucd

#----------------------------------------------------------------------------------------------------------------
# fcd
#----------------------------------------------------------------------------------------------------------------

fcd_usage()
{
    cat << EOF

Usage
-----

  fcd <some_string>

Searches all directories starting at the current one for a file which starts
with the string <some_string>.  If there is only a single file found, you will
immediately be switched to that directory.  If there are more than one directory
found, you will receive a list of matching directories and you can choose one.

Note that fcd supports the autocompletion functionality in bash.  Just use the
tab key to complete a word you are typing.  This will invoke find on the entire
directory tree under your current word, so use it wisely.

Example
-------
If you were currently in the directory /home/mflower and the following directories
were present:

    /home/mflower/code/test1
    /home/mflower/code/test2
    /home/mflower/code/oldcode

Here are a list of commands and what they would do:

    /home/mflower$ fcd test1
    /home/mflower/code/test1$ cd ../..
    /home/mflower$ fcd test

    Please choose a directory to change to
    --------------------------------------
      1. ./code/test1
      2. ./code/test2

    Your choice: 2

    /home/mflower/code/test2$ cd ../..
    /home/mflower$ fcd asdf
    No matching directories were found
    /home/mflower$

EOF
}

fcd() {
    if [ $# -eq 0 ] ; then
    	fcd_usage
    	return
    fi

    MATCHES_TEXT=`find . -name $1* -type d`
    MATCHES=( $MATCHES_TEXT )

    special_cd_menu MATCHES[@]
}

#Allow bash command line completion of fcd commands.  This does have this side effect
#of possibly running the find command twice, but this doesn't seem to be a large problem
#in practice.
fcd_completion() {
	local cur prev options
	COMPREPLY=()
	cur=`echo "${COMP_WORDS[COMP_CWORD]}" | sed 's/^ *//'`
	prev=`echo "${COMP_WORDS[COMP_CWORD-1]}" | sed 's/^ *//'`

	# $2 is the option to fcd.  If there hasn't been one, it will be blank and
	# we'll complete on everything.  That's too risky for me, so I will impose a
	# depth limit if there wasn't a parameter passed.
	if [ -n "$2" ]; then
		opts=`find . -type d -name "$2*" -exec basename {} \; | sort | uniq`
	else
		opts=`find . -type d -maxdepth 5 -name "*" -exec basename {} \; | sort | uniq`
	fi

	if [ -n ${cur} ] ; then
		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
		return 0
	fi
}
complete -F fcd_completion fcd

#----------------------------------------------------------------------------------------------------------------
# lcd
#----------------------------------------------------------------------------------------------------------------

lcd_usage() {
    cat << EOF

Usage
-----

  lcd <some_string>

Searches in the locate database for a directory which starts with the string
<some_string>.  If there is only a single file found, you will immediately be
switched to that directory.  If there are more than one directory found, you
will receive a list of matching directories and you can choose one.

Note that lcd supports the autocompletion functionality in bash.  Just use the
tab key to complete a word you are typing.  Ambiguous strings, such as single
letters, are probably a bad idea because they will return an enormous list of
results from locate.

Limitations
-----------
This command works great on machines where the locate database is updated
frequently.  If you are unfamiliar with it, the locate database is often found
at /var/db/locate.database.  Some sysadmins turn this database off, making it
useless for this command.

The locate database is usually updated on something like an hourly cycle.  If
your directory was created more recently than that, this command will not be
able to see it.  Also, if a directory was deleted since then, this command
may erroneously try to change to a directory which is not around anymore.

Finally, OS X users should skip right on over the mcd instead.  The locate
database is not updated by default on OS X machines, but the mdfind database
is -- it is a faster and superior choice for os x boxes.

Example
-------
    /Users/mflower$ lcd man3

    Please choose a directory to change to
    --------------------------------------
      1. /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/usr/share/man/man3
      2. /Developer/usr/X11/share/man/man3
      3. /Developer/usr/share/man/man3
      4. /opt/local/share/man/man3
      5. /opt/local/share/man/man3p
      6. /opt/subversion/man/man3
      7. /opt/subversion_backup.09192012155729/man/man3
      8. /usr/X11/share/man/man3
      9. /usr/share/man/man3

    Your choice:
EOF
}

lcd() {
  if [ $# -eq 0 ] ; then
    lcd_usage
    return
  fi

	currentItem=0
	matches=()

	# Construct a list of all locate entries that are directories and that match
	for dir in `locate $1 | grep $1[^/]*$` ; do
		if [ -d $dir ] ; then
			matches[currentItem]=$dir
			currentItem=$currentItem+1
		fi
	done

	special_cd_menu matches[@]
}


lcd_completion() {
	local cur prev options
	COMPREPLY=()
	cur=`echo "${COMP_WORDS[COMP_CWORD]}" | sed 's/^ *//'`
	prev=`echo "${COMP_WORDS[COMP_CWORD-1]}" | sed 's/^ *//'`

	#print "\nOptions: $1 $2\n"

	# $2 is the option to lcd.  If there hasn't been one, it will be blank and
	# we'll complete on everything in the locate database.  That's not worth it
	# to me.
	if [ -n "$2" ]; then
		opts=`locate $2 | xargs -I{} dirname {} | grep "$2[^/]*$" | xargs -I{} basename {} | sort | uniq`
	fi

	if [ -n ${cur} ] ; then
		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
		return 0
	fi
}
complete -F lcd_completion lcd

#----------------------------------------------------------------------------------------------------------------
# mcd
#----------------------------------------------------------------------------------------------------------------

mcd_usage() {
    cat << EOF

Usage
-----

  mcd <some_string>

Searches in the mdfind database for a directory which starts with the string
<some_string>.  If there is only a single file found, you will immediately be
switched to that directory.  If there are more than one directory found, you
will receive a list of matching directories and you can choose one.

Note that mcd supports the autocompletion functionality in bash.  Just use the
tab key to complete a word you are typing.

Limitations
-----------
This command only works on machines with an mdfind database -- as far as I know,
this is only OS X boxes which have spotlight on them.

Example
-------
    /Users/mflower$ mcd man3

    Please choose a directory to change to
    --------------------------------------
      1. /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/usr/share/man/man3
      2. /Developer/usr/X11/share/man/man3
      3. /Developer/usr/share/man/man3
      4. /opt/local/share/man/man3
      5. /opt/local/share/man/man3p
      6. /opt/subversion/man/man3
      7. /opt/subversion_backup.09192012155729/man/man3
      8. /usr/X11/share/man/man3
      9. /usr/share/man/man3

    Your choice:
EOF
}

mcd() {
  if [ $# -eq 0 ] ; then
    mcd_usage
    return
  fi

	currentItem=0
	matches=()

	# Construct a list of all locate entries that are directories and that match
	for dir in `mdfind -name $1 | grep $1[^/]*$ | sort` ; do
		if [ -d $dir ] ; then
			matches[currentItem]=$dir
			currentItem=$currentItem+1
		fi
	done

	special_cd_menu matches[@]
}

mcd_completion() {
	local cur prev options
	COMPREPLY=()
	cur=`echo "${COMP_WORDS[COMP_CWORD]}" | sed 's/^ *//'`
	prev=`echo "${COMP_WORDS[COMP_CWORD-1]}" | sed 's/^ *//'`

	#print "\nOptions: $1 $2\n"

	# $2 is the option to lcd.  If there hasn't been one, it will be blank and
	# we'll complete on everything in the locate database.  That's not worth it
	# to me.
	if [ -n "$2" ]; then
		opts=`mdfind -name $2 | xargs -I{} dirname {} | grep "$2[^/]*$" | xargs -I{} basename {} | sort | uniq`
	fi

	if [ -n ${cur} ] ; then
		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
		return 0
	fi
}
complete -F mcd_completion mcd

#----------------------------------------------------------------------------------------------------------------
# filecd
#----------------------------------------------------------------------------------------------------------------

filecd_usage() {
    cat << EOF

Usage
-----

  filecd <name of a source file>

Filecd helps you change to a directory where a file is located.

Example
-------
If the following file existed:

    /home/mflower/a/b/c/d/e/somefile.txt

And you typed:

    /home/mflower$ filecd somefile.txt
    /home/mflower/a/b/c/d/e/$

Your current directory would be /home/mflower/a/b/c/d/e/ directory.

EOF
}

filecd() {
    if [ $# -eq 0 ] ; then
    	filecd_usage
    	return
    fi

    MATCHES_TEXT=`find . -name $1 -type f -exec dirname {} \;`
    MATCHES=( $MATCHES_TEXT )

    special_cd_menu MATCHES[@]
}

filecd_completion() {
	local cur prev options
	COMPREPLY=()
	cur=`echo "${COMP_WORDS[COMP_CWORD]}" | sed 's/^ *//'`
	prev=`echo "${COMP_WORDS[COMP_CWORD-1]}" | sed 's/^ *//'`

	# $2 is the option to fcd.  If there hasn't been one, it will be blank and
	# we'll complete on everything.  That's too risky for me, so I will impose a
	# depth limit if there wasn't a parameter passed.
	if [ -n "$2" ]; then
		opts=`find . -type f -name "$2*" -exec basename {} \; | sort | uniq`
	fi

	if [ -n ${cur} ] ; then
		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
		return 0
	fi
}
complete -F filecd_completion filecd

#----------------------------------------------------------------------------------------------------------------
# dcd
#----------------------------------------------------------------------------------------------------------------

dcd_usage()
{
    cat << EOF

Overview
--------

dcd allows you to store a list of directory aliases in a
file that can easily be switched to from the command line.
This functionality can be replicated with aliases, but dcd
adds a lot of additional functionality like:

  * Adding aliases without having to source your profile
    repeatedly.
  * Autocompletion of aliases.

Usage
-----

  dcd <alias>
Changes to the directory alias which matches the parameter
listed for <alias> in the file ~/.dcd/dcd.conf

  dcd -e
Edit the list of directory aliases via an editor

  dcd -l
List the directory alias file.

  dcd -q
Figure out what aliases are associated with the current
directory.

  dcd -d <alias>
Remove any aliases pointing to the current directory from
the dcd config file.  If the alias is omitted, the any
aliases pointing to the current working directory will be
deleted.

  dcd -a <alias>
Add the current directory to the dcd.conf file using the
provided alias.  If the alias is omitted, the last segment
of the current working directory will be used as the alias
name.  (i.e. For /some/directory/here, the alias would be
here)

Example
-------
If ~/.dcd/dcd.conf contained the following lines:
ora=/opt/oracle/product/10.2.0/db_1
jboss=/opt/dev/jboss/jboss-4.0.4

Then typing
  dcd ora
would change to /opt/oracle/product/10.2.0/db_1

EOF
}

dcd()
{
  if [ $# -eq 0 ] ; then
    dcd_usage
    return
  elif [ $1 == "-d" ]; then
    if [ $# -gt 2 ]; then
      echo "Too many command line parameters"
      echo
      usage
      return
    fi

    #Delete the actual line from the file
		if [ $# -eq 2 ]; then
    	cp -f ~/.dcd/dcd.conf ~/.dcd/dcd.conf.backup
    	sed "/$2=/d" ~/.dcd/dcd.conf > ~/.dcd/dcd.conf.new
    	cp -f ~/.dcd/dcd.conf.new ~/.dcd/dcd.conf
		else
			#The user didn't specify which alias, so we are deleting all aliases
			#that have the current working directory as their target.
			CURRENT_DIR=`pwd`
			cp -f ~/.dcd/dcd.conf ~/.dcd/dcd.conf.backup
    	sed "\#=$CURRENT_DIR#d" ~/.dcd/dcd.conf > ~/.dcd/dcd.conf.new
    	cp -f ~/.dcd/dcd.conf.new ~/.dcd/dcd.conf
		fi

    return
  elif [ $1 == "-a" ]; then
    if [ $# -lt 2 ]; then
			NEW_ALIAS=`pwd | grep -Eo "/[^/]+$" | cut -c '2-'`
		else
			NEW_ALIAS=$2
    fi

    # make sure there is a dcd.conf file, if not, create one
    if [ ! -d ~/.dcd ]; then
      mkdir ~/.dcd
    fi

    if [ ! -f ~/.dcd/dcd.conf ]; then
      touch ~/.dcd/dcd.conf
    fi

    # make sure there isn't already an alias with this name
    ALIAS_EXISTS=`grep "^$NEW_ALIAS=" ~/.dcd/dcd.conf`
    if [ $? -eq 0 ] ; then
      echo "An alias by this name already exists, please choose another name."
      echo
      return
    fi

    if [ $# -gt 2 ]; then
      echo "Too many command line parameters"
      echo
      usage
      return
    fi

    if [ ! -e ~/.dcd/dcd.conf ]; then
      echo "# Dcd Configuration file" > ~/.dcd/dcd.conf
      echo "#" >> ~/.dcd/dcd.conf
      echo "# Add directory entries below as alias=directory" >> ~/.dcd/dcd.conf
      echo >> ~/.dcd/dcd.conf
    fi

    NEW_DIR=`pwd`
    echo "$NEW_ALIAS=$NEW_DIR" >> ~/.dcd/dcd.conf
    return
  elif [ $1 == "-e" ]; then
    nano ~/.dcd/dcd.conf
    return
  elif [ $1 == "-l" ]; then
    cat ~/.dcd/dcd.conf
    return
  elif [ $1 == "-q" ]; then
    cat ~/.dcd/dcd.conf | grep "$(pwd)" | awk -F "=" '{ print $1 }'
	return
  fi

  if [ ! -f ~/.dcd/dcd.conf ]; then
    echo "No directory aliases have been configured for dcd."
    echo "to add a directory alias, type dcd -edit"
    return
  fi

  # Support the form dcd code/Personal looking up the code alias
  # and going into the subdir Personal
  DCD_ALIAS=${1/\/*/}
  if [[ "$1" = *"/"* ]]; then
    DCD_SUBDIR=`echo $1 | sed -e "s#[^/]*/##"`
  else
    DCD_SUBDIR=""
  fi

  # Find the provided string in the dcd.conf file.  We only
  # look for matches that begin with a "^" and end with a "="
  # which means we don't allow partial completions.  (We do
  # provide programmatic completion though.)
  #
  # I could have just provided a list and let the user pick
  # the proper option from the list, but I like programmatic
  # completion more.  Also, if the user has too many things
  # to complete, that gets ugly quickly.
  DIR=`grep "^$DCD_ALIAS=" ~/.dcd/dcd.conf`
  if [ $? -eq 0 ] ; then
    # There are a couple of tricks here which are worth reminding
    # myself of in case I need them later.  The reason why this isn't
    # just a simple cd $DIR is because of spaces in file names.  We
    # use sed to replace the spaces with "\ " and then make sure that
    # the cd is wrapped in quotes.
    if [[ -z "$DCD_SUBDIR" ]]; then
      cd "`echo $DIR | awk -F "=" '{ print $2 }' | sed 's/ /\\ /g'`"
    else
      cd "`echo $DIR | awk -F "=" '{ print $2 }' | sed 's/ /\\ /g'`/$DCD_SUBDIR"
    fi
  else
    echo "Directory alias $DCD_ALIAS not found in ~/.dcd/dcd.conf"
  fi
}

dcd_completion()
{
    # TODO: We need to work on making completion work properly when
    # we append a subdir in dcd.  For example dcd code/Personal.
    # the personal part doesn't work at all right now.

    local cur prev opts
    COMPREPLY=()
    cur=`echo "${COMP_WORDS[COMP_CWORD]}" | sed 's/^ *//'`
    prev=`echo "${COMP_WORDS[COMP_CWORD-1]}" | sed 's/^ *//'`
    opts=`cat ~/.dcd/dcd.conf | awk -F "=" '{ print $1 }'`

    if [ -n ${cur} ] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
}
complete -F dcd_completion dcd

export -f dcd
export -f fcd
export -f filecd
export -f lcd
export -f mcd
export -f ucd
